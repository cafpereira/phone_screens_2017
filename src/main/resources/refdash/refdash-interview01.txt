/*
arr = [1, 3, 2, 0, 4, 2, 1]
startIndex

[1, 1, 1, 1, 1, 2, 0]

O(2^n)
O(N)


*/


boolean canReachZero(int[] arr, int startIndex, Set<Integer> visited) {
    int jumpLen = arr[startIndex];
    if (jumpLen == 0) {
        return true;
    }
    
    // Can i go left?
    int leftJump = startIndex - jumpLen;
    if (jumpLen <= startIndex && visited.contains(leftJump)) {
        visited.add(leftJump)
        if (canReachZero(arr, leftJump)){
            return true;
        }
    }
    
    // jump to the right
    int rightJump = startIndex + jumpLen
    if (jumpLen < arr.lenght - startIndex && visited.contains(rightJump)) {
        visited.add(rightJump)
        return canReachZero(arr, rightJump)
    }
    return false;
}







/*
https://www.youtube.com/watch?v=kKhnYLpME3w



Game of squares
Two players
Turn: Subtracting a perfect square from the current state
State: Always a non-negative integer

50
41
37
21
....
state = 64 = 8

65 - 64 [01]
65 - 49 [16]
65 - 36 [29]
65 - 25 [40]


19

10 (9x, 6, 1x)
6
2
1
0

4
3
2
1
0 (lose)

    1 2 3 ..                    65
----------------------------------
1   1 2 3                         
2   0 1 
4
16                               X



*/


int getOptimalMove(int currentState) {
    for (int i = 1; i < currentState; i*i) {
       if (i == currentState)
           return currentState
       int diff = currentState - i;
       if !isBadState(diff, i){
           return i;
       }
    }
}

boolean isBadState(int state, int square) {
    if (state == 0) {
        return false;
    }
    else if (state == )
    
    if () {}
    return isBadState(state - square)
}







